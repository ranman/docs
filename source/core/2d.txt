==============
``2d`` Indexes
==============

.. default-domain:: mongodb

.. include:: /includes/fact-limitation-one-geo-index-per-collection.rst

Use a ``2d`` index for data stored as points on a two-dimensional plane. The
``2d`` index is intended for legacy coordinate pairs used in MongoDB 2.2
and earlier.

Use a ``2d`` index if:

- your database has legacy location data from MongoDB 2.2 or earlier, *and*

- you do not intend to store any location data as :term:`GeoJSON` objects.

- you intend on working with simple flat geometry and not spherical geometry.


Do not use a ``2d`` index if your location data includes GeoJSON objects. To
index on both legacy coordinate pairs *and* GeoJSON objects, use a
:doc:`2dsphere </core/2dsphere>` index.

The ``2d`` index supports calculations on a flat, Euclidean plane. The
``2d`` index also supports *distance-only* calculations on a sphere,
but for *geometric* calculations (e.g. :query:`$geoWithin`) on a
sphere, store data as GeoJSON objects and use the ``2dsphere`` index
type.

A ``2d`` index can reference two fields. The first must be the location
field. A ``2d`` compound index constructs queries that select first on
the location field, and then filters those results by the additional
criteria. A compound ``2d`` index can cover queries.

.. |first-geo-index| replace:: ``2d``
.. |second-geo-index| replace:: :doc:`2dsphere </core/2dsphere>` 

.. note:: You cannot use a ``2d`` index as a shard key when
   sharding a collection. However, you can create and maintain a
   geospatial index on a sharded collection by using a different field
   as the shard key.

.. _geospatial-indexes-store-grid-coordinates:

Store Points on a 2D Plane
--------------------------

.. default-domain:: mongodb

To store location data as legacy coordinate pairs, use either an array
(preferred):

.. code-block:: javascript

   loc : [ <longitude> , <latitude> ]

Or an embedded document:

.. code-block:: javascript

   loc : { lng : <longitude> , lat : <latitude> }

Arrays are preferred as certain languages do not guarantee associative
map ordering.

Whether as an array or document, if you use longitude and latitude,
store coordinates in this order: **longitude, latitude**.

